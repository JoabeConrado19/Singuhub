{
  "name": "SinguHub_MatchEngine",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "singuhub-cadastro",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "f80c383e-06f6-4f30-8839-bdc167998f9b",
      "name": "Webhook - SinguHub Cadastro",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -944,
        1264
      ],
      "webhookId": "27ad53ba-5c94-482f-8741-1adde527da27"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.body[0].dados.empresa.empresa_nome }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Empressa",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -496,
        1168
      ],
      "id": "6758f5d6-5cb1-43d9-89b5-5840b8666275"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.body[0].dados.candidato.nome }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Candidato",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -496,
        1360
      ],
      "id": "410519e2-7ab1-4ffe-8601-eafe49d7e706"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -96,
        1264
      ],
      "id": "d19fcd6b-3791-4953-9a01-d6f258885c24",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// =========================================================\n// üß© Extrai apenas os dados da empresa do JSON recebido\n// =========================================================\nconst input = $input.all(); // pega todos os itens da entrada\nconst output = [];\n\ninput.forEach(item => {\n  const empresa = item.json?.body?.[0]?.dados?.empresa; // percorre o body do item\n  if (empresa) {\n    output.push({ json: empresa });\n  }\n});\n\n// Retorna aviso caso n√£o haja dados de empresa\nif (output.length === 0) {\n  output.push({ json: { erro: \"Nenhum dado de empresa encontrado\" } });\n}\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -272,
        1168
      ],
      "id": "3837af2c-90d4-4380-b34f-d10cd65af58c",
      "name": "Data_empressa"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all(); // Pega todos os itens recebidos\nconst output = [];\n\nfor (const item of input) {\n  // Acessa o candidato dentro do primeiro elemento do array body\n  const candidato = item.json?.body?.[0]?.dados?.candidato;\n\n  if (candidato) {\n    output.push({ json: candidato });\n  }\n}\n\nif (output.length === 0) {\n  return [{ json: { erro: \"Nenhum dado de candidato encontrado\" } }];\n}\n\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -272,
        1360
      ],
      "id": "bd92025e-ee41-4346-8bbe-3f84010e1c34",
      "name": "Data_candidato"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -720,
        1264
      ],
      "id": "719008e3-aa6f-411d-a2f8-ae3eec1e8add",
      "name": "normaliza√ß√£o"
    },
    {
      "parameters": {
        "jsCode": "// Pega o √∫nico objeto de input (empresa + candidato juntos)\nconst dados = $input.item.json || {};\n\n// Separar dados da empresa\nconst empresa = {\n  empresa_id: dados.empresa_id,\n  empresa_nome: dados.empresa_nome,\n  titulo: dados.titulo,\n  descricao: dados.descricao,\n  requisitos: dados.requisitos,\n  perfil_cultural: dados.perfil_cultural,\n  localizacao: dados.localizacao,\n  raio_busca_km: dados.raio_busca_km,\n  modo_trabalho: dados.modo_trabalho,\n  salario_min: dados.salario_min,\n  salario_max: dados.salario_max,\n  setor: dados.setor,\n  tipo_contrato: dados.tipo_contrato,\n  status: dados.status,\n  publicada_por: dados.publicada_por\n};\n\n// Separar dados do candidato\nconst candidato = {\n  nome: dados.nome,\n  pronome: dados.pronome,\n  data_nascimento: dados.data_nascimento,\n  email: dados.email,\n  telefone: dados.telefone,\n  foto_perfil: dados.foto_perfil,\n  pretensao_salarial: dados.pretensao_salarial,\n  linkedin: dados.linkedin,\n  curriculo: dados.curriculo,\n  cep: dados.cep,\n  pais: dados.pais,\n  estado: dados.estado,\n  cidade: dados.cidade,\n  latitude: dados.latitude,\n  longitude: dados.longitude,\n  identidade_genero: dados.identidade_genero,\n  cor: dados.cor,\n  possui_deficiencia: dados.possui_deficiencia,\n  formacoes: dados.formacoes,\n  experiencias: dados.experiencias,\n  habilidades: dados.habilidades,\n  preferencias: dados.preferencias,\n  fit_cultural: dados.fit_cultural,\n  consentimento: dados.consentimento\n};\n\n// 1Ô∏è‚É£ Compatibilidade T√©cnica (peso: 40%)\nconst requisitosTecnicos = empresa.requisitos || [];\nconst habilidades = candidato.habilidades || [];\n\nconst matchTecnico =\n  requisitosTecnicos.length > 0\n    ? (habilidades.filter(h =>\n        requisitosTecnicos.map(r => r.toLowerCase()).includes(h.toLowerCase())\n      ).length /\n      requisitosTecnicos.length) * 100\n    : 0;\n\n// 2Ô∏è‚É£ Compatibilidade Comportamental (peso: 20%)\nconst competenciasComportamentais = empresa.requisitos?.competencias_comportamentais || [];\nconst comportamentaisCand = candidato.competencias_comportamentais || [\"Comunica√ß√£o\", \"Colabora√ß√£o\", \"Autonomia\"];\n\nconst matchComportamental =\n  competenciasComportamentais.length > 0\n    ? (comportamentaisCand.filter(c =>\n        competenciasComportamentais.map(r => r.toLowerCase()).includes(c.toLowerCase())\n      ).length /\n      competenciasComportamentais.length) * 100\n    : 0;\n\n// 3Ô∏è‚É£ Fit Cultural (peso: 30%)\nconst bigFiveVaga = empresa.perfil_cultural?.big_five_desejado || {};\nconst bigFiveCand = candidato.fit_cultural?.big_five || {};\n\nconst chavesBigFive = [\"abertura\", \"consciencia\", \"extroversao\", \"amabilidade\", \"neuroticismo\"];\nlet somaSimilaridade = 0;\n\nchavesBigFive.forEach(chave => {\n  const vagaVal = bigFiveVaga[chave] ?? 0;\n  const candVal = bigFiveCand[chave] ?? 0;\n  somaSimilaridade += 1 - Math.abs(vagaVal - candVal);\n});\n\nconst matchCultural = (somaSimilaridade / chavesBigFive.length) * 100;\n\n// 4Ô∏è‚É£ Geolocaliza√ß√£o / Dist√¢ncia (peso: 10%)\nconst toRad = v => (v * Math.PI) / 180;\nconst R = 6371;\nconst lat1 = empresa.localizacao?.latitude ?? 0;\nconst lon1 = empresa.localizacao?.longitude ?? 0;\nconst lat2 = candidato.latitude ?? 0;\nconst lon2 = candidato.longitude ?? 0;\n\nconst dLat = toRad(lat2 - lat1);\nconst dLon = toRad(lon2 - lon1);\n\nconst a =\n  Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n  Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n  Math.sin(dLon / 2) * Math.sin(dLon / 2);\n\nconst distancia = 2 * R * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\nlet matchLocal = 100;\nif (empresa.raio_busca_km && distancia > empresa.raio_busca_km) {\n  matchLocal = Math.max(0, 100 - ((distancia - empresa.raio_busca_km) * 2));\n}\n\n// 5Ô∏è‚É£ Score total\nconst score =\n  matchTecnico * 0.4 +\n  matchComportamental * 0.2 +\n  matchCultural * 0.3 +\n  matchLocal * 0.1;\n\n// 6Ô∏è‚É£ Monta resultado\nconst resultadoMatch = {\n  empresa: empresa.empresa_nome,\n  candidato: candidato.nome,\n  cargo: empresa.titulo,\n  score_total: Math.round(score),\n  detalhes: {\n    tecnico: Math.round(matchTecnico),\n    comportamental: Math.round(matchComportamental),\n    cultural: Math.round(matchCultural),\n    localizacao: Math.round(matchLocal),\n    distancia_km: Number(distancia.toFixed(2))\n  },\n  status: score >= 70 ? \"ALTA COMPATIBILIDADE\" : score >= 40 ? \"M√âDIA\" : \"BAIXA\"\n};\n\n// 7Ô∏è‚É£ Retorna resultado e dados separados\nreturn [\n  { json: { match: resultadoMatch } },\n  { json: { candidato } },\n  { json: { empresa } }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        48,
        1264
      ],
      "id": "3170c152-0b14-4099-9f99-aef6e0b91129",
      "name": "Modelagem"
    },
    {
      "parameters": {
        "jsCode": "// =========================================================\n// üß© Limpa o retorno do agente LLM e converte para JSON puro\n// =========================================================\n\n// Pega o texto bruto do input\nconst raw = $json.text || \"\";\n\n// Remove blocos de c√≥digo markdown, espa√ßos e quebras de linha extras\nconst cleaned = raw\n  .replace(/```json|```/gi, \"\") // remove marcadores de c√≥digo\n  .replace(/\\\\n/g, \"\\n\")        // normaliza quebras de linha\n  .replace(/\\r/g, \"\")           // remove \\r\n  .trim();\n\n// Tenta converter o texto em objeto JSON\nlet parsed;\ntry {\n  parsed = JSON.parse(cleaned);\n} catch (e) {\n  parsed = {\n    erro: \"‚ùå Falha ao converter texto em JSON\",\n    mensagem: e.message,\n    conteudo_original: cleaned.slice(0, 1000) // corta pra evitar payload gigante\n  };\n}\n\n// =========================================================\n// üîÑ Retorno √∫nico como data_array\n// =========================================================\nlet data_array = [];\n\n// Se contiver os dois feedbacks, insere ambos no array\nif (parsed.feedback_candidato || parsed.feedback_empresa) {\n  if (parsed.feedback_candidato) {\n    data_array.push({ tipo: \"candidato\", ...parsed.feedback_candidato });\n  }\n  if (parsed.feedback_empresa) {\n    data_array.push({ tipo: \"empresa\", ...parsed.feedback_empresa });\n  }\n} else {\n  // Se for JSON simples, joga inteiro dentro do array\n  data_array.push(parsed);\n}\n\n// Retorno padronizado\nreturn [\n  {\n    json: {\n      data_array\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        1248
      ],
      "id": "461df501-8771-4830-b35e-ab7607aff096",
      "name": "Data_array"
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Resposta",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        928,
        1248
      ],
      "id": "5e5332e8-b3b9-4045-a209-0eca2ade5750"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Voc√™ √© um assistente de recrutamento especializado em an√°lise de compatibilidade entre candidatos e vagas em tecnologia e log√≠stica.  \nSeu papel √© comparar compet√™ncias, experi√™ncias, forma√ß√£o e perfil comportamental do candidato com os requisitos t√©cnicos, culturais e log√≠sticos da vaga, gerando feedbacks objetivos, emp√°ticos e estruturados.\n\nRegras de an√°lise:\n1. Utilize somente os crit√©rios da vaga fornecidos no JSON: requisitos t√©cnicos, habilidades, idioma, localiza√ß√£o, modalidade de trabalho e perfil cultural.  \n2. Identifique pontos fortes do candidato que atendem ou excedem os crit√©rios da vaga.  \n3. Aponte lacunas reais, explicando de forma emp√°tica o que pode ser desenvolvido.  \n4. Sugira apenas os treinamentos relevantes da lista abaixo, se houver lacunas que possam ser desenvolvidas.  \n5. Inclua o link do treinamento sugerido, usando o formato: https://singuacademy.com/curso/[nome-do-curso].  \n6. Produza JSON estruturado, sem texto extra, explica√ß√µes ou markdown.\n\nInforma√ß√µes para an√°lise:\n- Vaga: {{ $json.empresa }}  \n- Candidato: {{ $json.candidato }}  \n\nTreinamentos (apenas indicar se necess√°rio):\n- https://singuacademy.com/curso\n\nFormato do feedback:\n\n1Ô∏è‚É£ Feedback para o CANDIDATO ({{ $json.candidato.nome }})\n- Comece com tom positivo, destacando pontos fortes e experi√™ncias plus relacionadas √† vaga.  \n- Apresente lacunas reais identificadas em rela√ß√£o aos crit√©rios da vaga.  \n- Sugira apenas os treinamentos relevantes (at√© 3), com link direto para cada curso.  \n- Finalize com uma mensagem motivacional.\n\n2Ô∏è‚É£ Feedback para a EMPRESA\n- Resumo da ader√™ncia geral entre candidato e vaga.  \n- Avalia√ß√£o t√©cnica baseada nos crit√©rios da vaga (Dom√≠nio / Intermedi√°rio / B√°sico).  \n- Avalia√ß√£o de fit cultural e alinhamento com os valores da empresa.  \n- Indica√ß√£o de recomenda√ß√£o baseada na compatibilidade total:\n  - ‚â•70% ‚Üí ‚ÄúRecomendado para pr√≥xima fase‚Äù  \n  - 40‚Äì69% ‚Üí ‚ÄúRecomendar ap√≥s desenvolvimento‚Äù  \n  - <40% ‚Üí ‚ÄúN√£o recomendado no momento‚Äù  \n- Sugest√£o de a√ß√£o de acompanhamento (ex.: treinamento, monitoramento ou pr√≥xima etapa).  \n\nSa√≠da obrigat√≥ria em JSON (sem explica√ß√µes, sem markdown, sem texto adicional):\n\n{\n  \"feedback_candidato\": {\n    \"resumo\": \"Mensagem positiva destacando pontos fortes e experi√™ncias plus.\",\n    \"melhorias\": [\n      \"Lacuna 1\",\n      \"Lacuna 2\",\n      \"Lacuna 3\"\n    ],\n    \"treinamentos_recomendados\": [\n      {\n        \"titulo\": \"T√≠tulo do treinamento necess√°rio\",\n        \"link\": \"https://singuacademy.com/curso/[nome-do-curso]\"\n      }\n    ]\n  },\n  \"feedback_empresa\": {\n    \"resumo\": \"S√≠ntese clara do match candidato-vaga.\",\n    \"avaliacao_tecnica\": \"Descri√ß√£o do dom√≠nio t√©cnico do candidato nas principais ferramentas exigidas pela vaga.\",\n    \"avaliacao_cultural\": \"An√°lise do alinhamento do candidato com os valores da empresa.\",\n    \"recomendacao\": \"Recomendado / Requer Desenvolvimento / N√£o Recomendado\",\n    \"acao_sugerida\": \"Breve sugest√£o de acompanhamento.\"\n  }\n}\n",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        416,
        1280
      ],
      "id": "62930d84-c0de-495e-be28-47974bc45ab3",
      "name": "Basic LLM Chain1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        368,
        1456
      ],
      "id": "7231adc8-cf81-42ad-b7dd-939d7083f2f2",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "o246sJ0WQ3qtx8Ck",
          "name": "Google Gemini(PaLM) Api account 31"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\n\nconst match = input[0]?.json?.match || {};\nconst candidato = input[1]?.json?.candidato || {};\nconst empresa = input[2]?.json?.empresa || {};\n\nreturn [\n  {\n    json: {\n      match,\n      candidato,\n      empresa\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        1280
      ],
      "id": "7a193835-c28f-4dea-b6c2-3b6bf04d3b6d",
      "name": "Code in JavaScript"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook - SinguHub Cadastro": {
      "main": [
        [
          {
            "node": "normaliza√ß√£o",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Empressa": {
      "main": [
        [
          {
            "node": "Data_empressa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Candidato": {
      "main": [
        [
          {
            "node": "Data_candidato",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data_empressa": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data_candidato": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Modelagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normaliza√ß√£o": {
      "main": [
        [
          {
            "node": "Empressa",
            "type": "main",
            "index": 0
          },
          {
            "node": "Candidato",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Modelagem": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data_array": {
      "main": [
        []
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        [
          {
            "node": "Data_array",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e6b3e5d4-e7fb-4888-a654-6217d9500421",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1dac8b887eea51519ca5afc1ee67507bd3d4d4d6a557d40e0f9cb92339e1953c"
  },
  "id": "6OCS7QmedVeqixRJ",
  "tags": []
}